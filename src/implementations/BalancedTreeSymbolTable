package implementations;

public class BalancedTreeSymbolTable {

    private Node root;

    public BalancedTreeSymbolTable(String rootValue) {
        root = new Node(rootValue);
    }

    public Node getRoot() {
        return root;
    }

    public void drawTree() {
        drawTree(root);
    }

    public void drawTree(Node node) {
        if (node.left != null) {
            drawTree(node.left);
        }
        System.out.println("[" + node.value + ": " + node.count + "] - ");
        if (node.right != null) {
            drawTree(node.right);
        }
    }

    public class Node {

        private Node left, right;
        private String value;
        private int count;

        public Node(String value) {
            this.value = value;
            this.count = 1;
        }

        public void insert(String value) {
            if (this.value.compareTo(value) > 0) {
                if (this.left != null) {
                    this.left.insert(value);
                } else {
                    this.left = new Node(value);
                }
            } else if (this.value.compareTo(value) < 0) {
                if (this.right != null) {
                    this.right.insert(value);
                } else {
                    this.right = new Node(value);
                }
            } else {
                this.count++;
            }
        }

        public boolean contains(String value) {
            if (this.value.compareTo(value) > 0 && this.left != null) {
                return this.left.contains(value);
            } else if (this.value.compareTo(value) < 0 && this.right != null) {
                return this.right.contains(value);
            }
            return this.value.equals(value);
        }

        public void rotateLeft() {
            // 1) Get "This"'s Right Childs' Left node (We will be attaching it to the "This"'s Right side)
            Node leftTemp = null;
            if (this.right != null && this.right.left != null) {
                leftTemp = this.right.left;
            }
            // 2) Set Right child's Left node as "this"
            if (this.right != null) {
                this.right.left = this;
            }
            // 3) Set "This"'s right node to the saved temporary node
            this.right = leftTemp;
        }

        public void rotateRight() {
            // 1) Get "This"'s Left Childs' Right node (We will be attaching it to the "This"'s Left side)
            Node rightTemp = null;
            if (this.left != null && this.left.right != null) {
                rightTemp = this.left.right;
            }
            // 2) Set Left child's Right node as "this"
            if (this.left != null) {
                this.left.right = this;
            }
            // 3) Set "This"'s left node to the saved temporary node
            this.left = rightTemp;
        }

    }

}
